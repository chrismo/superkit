#!/usr/bin/env bash

set -euo pipefail

function _script_dir() {
  dirname "${BASH_SOURCE[0]}"
}

function _check_command() {
  command -v "$1" &>/dev/null
}

function _fuzzy_view() {
  local -r pager="${PAGER:-less}"

  local -r contents=$(cat -)

  # 0.53.0 is the version that added multi-line support. 0.56.1 shows the last
  # significant bug fix for multi-line, and is preferred; --gap was added in
  # 0.56.0, so - we'll just check for the existence of the --gap command and go
  # multi-line if it's there, otherwise, nuhp, and stay single-line.
  if _check_command fzf; then
    if fzf --help | grep -q -- '--gap'; then
      echo "$contents" |
        sed 's/¶/\n/g' | perl -pe 's/§\n/\0/g' |
        fzf --read0 --gap --highlight-line --layout reverse
    else
      # single-line fzf here I think still looks ok with these multi-line
      # outputs passing --read0 as the NUL delimiter. Each func/op gets a clear
      # "header" on left of the line, and it's one line per func/op, vs. one
      # line per example. The trade-off is if there are multiple examples, they
      # just side scroll off the right edge. But, after selecting a line the
      # full-multi-line output is shown in the terminal after fzf exits.
      #
      # --read0 was released in 0.15.0 in 2016, so I think think it's safe to
      # presume it's available.
      echo "$contents" |
        sed 's/¶/\n/g' | perl -pe 's/§\n/\0/g' |
        fzf --read0 --layout reverse
    fi
  else
    # Setting LESSCHARSET is irrelevant if PAGER is set to some other program,
    # but, for now this is fine.
    #
    # The perl command is similar to the fzf cases, but here just replaces with
    # a newline, since the NUL character isn't needed.
    echo "$contents" |
      sed 's/¶/\n/g' | perl -pe 's/§/\n/g' |
      LESSCHARSET=utf-8 $pager
  fi
}

function default() {
  local -r op_name="skops_multi_line()"

  if _check_command super; then
    super -f line -I "$(_script_dir)/skops.spq" \
      -c "$op_name" "$(_script_dir)/skops.jsup" | _fuzzy_view
  elif _check_command zq; then
    zq -f text -I "$(_script_dir)/skops.spq" \
      "$op_name" "$(_script_dir)/skops.jsup" | _fuzzy_view
  else
    echo "ERROR: Could not find 'super' or 'zq' on PATH"
    exit 1
  fi
}

default "$@"
