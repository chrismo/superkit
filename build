#!/usr/bin/env bash

set -euo pipefail

export ASDF_SUPERDB_VERSION=0.50327

function _script_dir() {
  dirname "${BASH_SOURCE[0]}"
}

function _update_super_version_in_docs() {
  local -r version=$(super --version)

  for file in "$(_script_dir)"/doc/*.md; do
    echo >&2 "$file"
    sed -i '' -E "s/Version: v1\.18\.0-[0-9]+-g.*/$version/g" "$file"
  done

  # 1s, not s, and no trailing -g to do the 1st occurrence
  sed -i '' -E "1s/super_version: \".*\"/super_version: \"$version\"/" \
    "$(_script_dir)"/changelog.jsup
}

function _super() {
  echo "building super"
  pushd ../super
  make clean build install
  cp ./dist/super /usr/local/bin
  ls -la /usr/local/bin/super

  super --version

  # returns (separated by hyphens):
  # - latest tag (e.g. v1.18.0)
  # - number of commits since the tag
  # - abbreviated commit object prefixed with `g` for git
  #
  # The last hash SHOULD match the last commit hash (plus a `g` prefix)
  echo "Version: $(git describe --tags --dirty --always)"

  popd
}

function superkit() {
  local -r dst_dir="$(_script_dir)"/tmp/

  [ -d "$dst_dir" ] && rm -r "$dst_dir"

  mkdir "$dst_dir"
  mkdir "$dst_dir"/bin
  mkdir "$dst_dir"/lib

  # build the single superkit library file
  cat "$(_script_dir)"/src/*.spq >"$dst_dir"/lib/superkit.spq

  _parse_spqs "$dst_dir"/lib/superkit.spq

  # copy in all superkit bin scripts
  cp -v "$(_script_dir)"/bin/sk* "$dst_dir"/bin/

  # copy in superkit's docs
  mkdir -p "$dst_dir"/lib/doc/superkit
  cp -v "$(_script_dir)"/doc/* "$dst_dir"/lib/doc/superkit/

  # rsync in super's documentation
  local -r super_doc_dst_root="$dst_dir"/lib/doc/super
  mkdir "$super_doc_dst_root"

  ## ... use --dry-run if you need to test changes here
  rsync -av --relative "$(_script_dir)"/../super/docs/ "$super_doc_dst_root"

  mkdir -p "$(_script_dir)"/dist/

  # install gtar with `brew install gnu-tar` on macOS
  gtar -czf "$(_script_dir)"/dist/superkit.tar.gz -C "$dst_dir" .
}

function test() {
  "$(_script_dir)"/test.sh
}

function skgrok() {
  fn="../super/pkg/grok/base.go"

  super -z -i line -c "
    grep('h.Must')
    | grok('.*h.Must\\\\(\"%{USERNAME:pattern_name}.*?\`%{GREEDYDATA:regex}\`', this)" $fn \
    >./bin/skgrok.jsup
}

function _parse_spqs() {
  local -r dist_fn="$1"

  # we're running this on the concatenated distribution file
  # for convenience.

  # If we want to distribute individual files in the future,
  # maybe `sk` command could handle includes. then test.sh
  # re-uses `sk` command - everything that relies on includes
  # re-uses `sk` command. I sorta like that.

  local record name spq_fn

  while IFS=$'\n' read -r record; do
    name=$(echo "$record" | zq -f text 'yield this.name' -)
    spq_fn=$(echo "$record" | zq -f text 'yield this.filename' -)

    super -z -I "$dist_fn" -c "$name()"
  done < <(
    super -i line -z -I ./src/skdoc.spq \
      -c "skdoc_parse_file_contents(this)" "$dist_fn"
  ) >>"$(_script_dir)"/bin/skops.jsup
}

function _parse_md_file() {
  local -r fn="$1"

  # This is an interesting, superfluous use of super to execute this case
  # statement. :) But - in the spirit of leaning into using it more, imma leave
  # it, even though it's a bit silly.
  #
  # Zooming out one step, the lines between super and bash are very blurred in
  # this entire method. It might be interesting to try and push this whole thing
  # into a single execution of super. I may be closer than I realize.
  local -r type=$(
    echo "$fn" |
      super -i line -f text -c "
        switch (
          case grep('language/agg',this) => 'agg'
          case grep('language/func',this) => 'func'
          case grep('language/oper',this) => 'op'
        )" -
  )

  super -i line -z -c '
      op parse_spq_test(test_record): (
        test_record.i:=f"[{join(test_record.inputs, ",")}] | over this | {test_record.spq[0]}",
        test_record.o:=is(test_record.outputs, <null>) ? "" : join(test_record.outputs, " ↵ ")
      )

      op process_chunk(chunk): (
        split(chunk, " ↵ ")
        | over this | where len(this) > 0 | collect(this)
      )

      op parse_spq_tests(line): (
        grok(".*?# spq%{DATA:spq}# input%{DATA:inputs}# expected output%{GREEDYDATA:outputs}", line)
        | spq:=(over [this] | process_chunk(this.spq)),
          inputs:=(over [this] | process_chunk(this.inputs)),
          outputs:=(over [this] | process_chunk(this.outputs))
        | parse_spq_test(this)
        | cut i,o
        | collect(this)
        | {examples: this}
      )

      collect(this)                      // collect all lines to get the entire file
      | join(this, " ↵ ")                // make it all one string
      | split(this, "```mdtest-spq")[1:] // drop the 0th item before the first occurrence
      | over this
      | grok("%{DATA:data}```", this)
      | parse_spq_tests(this.data)
      ' "$fn" |
    super -z -c "{name:'$(basename "$fn" ".md")', type:'$type', ...this}" -
}

function _parse_super_mds() {
  for fn in "$(_script_dir)"/../super/docs/language/**/*md; do
    if ! grep -q '```mdtest-spq' "$fn"; then
      echo >&2 "skipping $fn"
      continue
    fi

    echo >&2 "$fn"
    _parse_md_file "$fn" >>"$(_script_dir)"/bin/skops.jsup
  done
}

function skops() {
  local -r dst_fn="$(_script_dir)"/bin/skops.jsup
  [[ -e $dst_fn ]] && rm "$dst_fn"

  # _parse_spqs # do this later now
  _parse_super_mds
  super -z -c 'sort type,name' "$dst_fn" >"$dst_fn".sorted
  mv "$dst_fn".sorted "$dst_fn"
}

function default() {
  test
  ./test-doc.sh
  skgrok
  skops
  superkit
}

function _usage() {
  grep -E '^function' "${BASH_SOURCE[0]}" | sort
}

function usage() {
  _usage | less -FX
}

if [ $# -eq 0 ]; then
  default
else
  while getopts "ho:" opt; do
    case $opt in
    h)
      usage
      exit 0
      ;;
    o) opt="$OPTARG" ;;
    \?) # ignore invalid options
      ;;
    esac
  done

  # Remove options processed by getopts, so the remaining args can be handled
  # positionally.
  shift $((OPTIND - 1))

  "$@"
fi
