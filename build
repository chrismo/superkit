#!/usr/bin/env bash

set -euo pipefail

function _script_dir() {
  dirname "${BASH_SOURCE[0]}"
}

function _super() {
  echo "building super"
  pushd ../super
  make clean build install
  cp ./dist/super /usr/local/bin
  ls -la /usr/local/bin/super

  super --version

  # returns (separated by hyphens):
  # - latest tag (e.g. v1.18.0)
  # - number of commits since the tag
  # - abbreviated commit object prefixed with `g` for git
  #
  # The last hash SHOULD match the last commit hash (plus a `g` prefix)
  echo "Version: $(git describe --tags --dirty --always)"

  popd
}

function default() {
  test
  skgrok
  superkit
}

function superkit() {
  # TODO: gotta go with a .tar.gz to bundle everything up
  local -r dst_dir="$(_script_dir)"/tmp/

  [ -d "$dst_dir" ] && rm -r "$dst_dir"

  mkdir "$dst_dir"
  mkdir "$dst_dir"/bin
  mkdir "$dst_dir"/lib

  cat "$(_script_dir)"/src/*.spq >"$dst_dir"/lib/superkit.spq

  cp -v "$(_script_dir)"/bin/sk* "$dst_dir"/bin/

  mkdir "$dst_dir"/lib/doc
  cp -v "$(_script_dir)"/doc/* "$dst_dir"/lib/doc/

  # TODO: use gtar on mac to avoid xattr issues
  tar -czf "$(_script_dir)"/dist/superkit.tar.gz -C "$dst_dir" .
}

function test() {
  "$(_script_dir)"/test.sh
}

function skgrok() {
  fn="../super/pkg/grok/base.go"

  super -z -i line -c "
    grep('h.Must')
    | grok('.*h.Must\\\\(\"%{USERNAME:pattern_name}.*?\`%{GREEDYDATA:regex}\`', this)" $fn \
    >./bin/skgrok_data.jsup
}

function _usage() {
  grep -E '^function' "${BASH_SOURCE[0]}" | sort
}

function usage() {
  _usage | less -FX
}

if [ $# -eq 0 ]; then
  default
else
  while getopts "ho:" opt; do
    case $opt in
    h)
      usage
      exit 0
      ;;
    o) opt="$OPTARG" ;;
    \?) # ignore invalid options
      ;;
    esac
  done

  # Remove options processed by getopts, so the remaining args can be handled
  # positionally.
  shift $((OPTIND - 1))

  "$@"
fi
