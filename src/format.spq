// cannot get above EB with uint64 - sorry "ZB" & "YB" and beyond...
const k_bytes_units=["B", "KB", "MB", "GB", "TB", "PB", "EB"]
const k_bytes_divisor=1024

func _k_bytes_unit_index(value): (
  uint64(floor(log(value) / log(k_bytes_divisor)))
)

func _kformat_nonzero_bytes(value): (
  f"{uint64(value / pow(k_bytes_divisor, _k_bytes_unit_index(value)))} {k_bytes_units[_k_bytes_unit_index(value)]}"
)

// {skdoc:{desc:"Returns the size in bytes in human readable format.",
//         args:[{value:"Must be castable to uint64"}],
//         examples:[{i:"kformat_bytes(1048576)",o:"'1 MB'"}] } }
func kformat_bytes(value): (
  (value == 0) ? "0 B" : _kformat_nonzero_bytes(value)
)

// {skdoc:{desc:"Inserts pad_char to the right of the string until it reaches target_length.",
//         args:[{s:"The string to pad"},
//               {pad_char:"The character to pad with"},
//               {target_length:"The target length of the string"}],
//         examples:[{i:"sk_pad_right('abc', ' ', 5)",o:"'abc  '"}] } }
func sk_pad_right(s, pad_char, target_length): (
  len(s) < target_length ? sk_pad_right(f"{s}{pad_char}", pad_char, target_length) : s
)
