// the built-in `fields` function is similar, but puts each field into its own
// nested array, though it also handles nested keys. This keys operator here
// attempts to emulate jq's keys, which does not go deep but only lists the
// top-level ones.

op keys(): (
  // ... with sorted keys:
  // over this => (this.key[0]) | sort | collect(this)

  // ... in order:
  over this => (this.key[0]) | collect(this)
)

op merge_records(): (
  string(this)
  | replace(this, "},{",",")
  | parse_zson(this)
  | over this
  | head 1
)

// # this sort of approach suffers from an illegal left-hand assignment:
// ‚ùØ zq '[{a:1},{b:{c:333}}] | (over this with obj={} | flatten(this) | obj[key[0]]:=value )'

// # this was a better step from Phil, but doesn't work on nested records
// over this
// | over flatten(this)
// | collect_map(|{key[0]:value}|)
// | yield parse_zson(replace(string(this), "|", ""))'


